generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change this if using a different database
  url      = env("DATABASE_URL")
}

enum Status {
  APPROVED
  REJECTED
  HALTED
  ONGOING
  SUSPENDED
}

model Ministry {
  mid          String     @id @default(uuid())
  central      Boolean
  stateId      String? // Nullable for ministries that are central
  name         String
  desc         String
  persons      Person[]   @relation("PersonMinistry")
  schemes      Scheme[]   @relation("SchemeMinistry")
  projects     Project[]
  expenditures Cashflow[]
  incomes      Income[]
}

model Person {
  pid        String     @id @default(uuid())
  name       String
  phone      String
  address    String
  area       String[]
  position   String[]
  photo      String
  stateIds   String[]
  projectIds String[]
  schemeIds  String[]
  localIds   String[]
  ministries Ministry[] @relation("PersonMinistry")
}

model Project {
  pid          String     @id @default(uuid())
  name         String
  desc         String
  start        String // Stored as milliseconds
  end          String? // Nullable for ongoing projects
  status       Status
  stateIds     String[]
  photos       Json[] // Array of objects: { image: string, desc: string }
  central      Boolean
  localIds     String[]
  ministry     Ministry?  @relation(fields: [ministryId], references: [mid])
  ministryId   String?
  expenditures Cashflow[]
}

model State {
  sid         String     @id @default(uuid())
  name        String
  Expenditure Cashflow[]
  Income      Income[]
}

model Cashflow {
  eid        String    @id @default(uuid())
  photo      String?
  desc       String
  name       String
  amount     String
  project    Project?  @relation(fields: [projectId], references: [pid])
  projectId  String?
  scheme     Scheme?   @relation(fields: [schemeId], references: [sid])
  schemeId   String?
  income     Income?   @relation(fields: [incomeId], references: [iid])
  incomeId   String?
  ministry   Ministry? @relation(fields: [ministryId], references: [mid])
  ministryId String?
  central    Boolean
  state      State?    @relation(fields: [stateId], references: [sid])
  stateId    String
  local      Local?    @relation(fields: [localId], references: [lid])
  localId    String
}

model Income {
  iid         String     @id @default(uuid())
  name        String
  desc        String
  date        String // Stored as milliseconds
  t_amount    String
  central     Boolean
  state       State?     @relation(fields: [stateId], references: [sid])
  stateId     String?
  local       Local?     @relation(fields: [localId], references: [lid])
  localId     String?
  ministry    Ministry?  @relation(fields: [ministryId], references: [mid])
  ministryId  String?
  Expenditure Cashflow[]
}

model Local {
  lid      String     @id @default(uuid())
  name     String
  incomes  Income[]
  Cashflow Cashflow[]
}

model Scheme {
  sid          String     @id @default(uuid())
  name         String
  desc         String
  central      Boolean
  stateIds     String[]
  start        String // Stored as milliseconds
  end          String?
  status       Status
  photos       Json[] // Array of objects: { image: string, desc: string }
  ministry     Ministry?  @relation("SchemeMinistry", fields: [ministryId], references: [mid])
  ministryId   String?
  localIds     String[]
  expenditures Cashflow[]
}
